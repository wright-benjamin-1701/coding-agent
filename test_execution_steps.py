#!/usr/bin/env python3
"""
Test the enhanced JSON format with execution_steps for the planner
"""

from src.core.prompt_utils import create_directive_user_message

def test_execution_steps_format():
    """Test the new execution_steps format"""
    
    # Mock tool schemas
    mock_tools = [
        {
            "name": "search",
            "description": "Search for text patterns in code files"
        },
        {
            "name": "file", 
            "description": "Read, write, and manipulate files"
        },
        {
            "name": "git",
            "description": "Execute git commands and operations"
        }
    ]
    
    user_prompt = "find all main functions and show me the first one"
    
    directive_message = create_directive_user_message(user_prompt, mock_tools)
    
    print("üîß ENHANCED JSON FORMAT WITH EXECUTION STEPS")
    print("=" * 80)
    print(directive_message)
    print("=" * 80)
    
    print("\nüéØ EXPECTED MODEL RESPONSE:")
    expected_response = """{
    "requires_tools": true,
    "needs_clarification": false,
    "tools_needed": ["search", "file"],
    "action_sequence": ["search for main functions", "read first result"],
    "execution_steps": [
        {
            "step": "Search for main function definitions",
            "tool": "search", 
            "parameters": {"query": "def main", "search_type": "text"},
            "dependencies": []
        },
        {
            "step": "Read the first main function file",
            "tool": "file",
            "parameters": {"action": "read", "path": "determined_from_search"},
            "dependencies": ["step_1"]
        }
    ],
    "priority": 3,
    "complexity": "medium",
    "estimated_steps": 2,
    "clarification_questions": [],
    "alternatives": ["manual code review"]
}"""
    print(expected_response)
    
    print("\nüìã KEY ENHANCEMENTS:")
    print("   ‚úÖ execution_steps array provides detailed step information")
    print("   ‚úÖ Each step includes: description, tool, parameters, dependencies")
    print("   ‚úÖ Parameters are specific and actionable for tools")
    print("   ‚úÖ Dependencies establish proper execution order")
    print("   ‚úÖ Planner can directly convert these to TaskStep objects")

def test_fallback_execution_steps():
    """Test that intelligent fallback also generates execution steps"""
    
    print("\n\nüéØ TESTING FALLBACK EXECUTION STEPS")
    print("=" * 80)
    
    # Mock orchestrator setup
    class MockProvider:
        def list_models(self):
            return ["qwen3:30b"]
    
    class MockTool:
        def __init__(self, name):
            self.name = name
    
    from src.core.orchestrator import AgentOrchestrator
    
    orchestrator = AgentOrchestrator(MockProvider(), [
        MockTool("search"), MockTool("file"), MockTool("git")
    ])
    
    # Test fallback with file operation
    user_input = "show me the README file"
    model_response = "I'll read the README file for you"
    
    fallback = orchestrator._create_intelligent_fallback(user_input, model_response)
    
    print(f"Input: {user_input}")
    print(f"Response: {model_response}")
    print(f"Fallback analysis:")
    print(f"   tools_needed: {fallback['tools_needed']}")
    print(f"   execution_steps: {fallback.get('execution_steps', 'NOT FOUND')}")
    
    if fallback.get('execution_steps'):
        for i, step in enumerate(fallback['execution_steps']):
            print(f"   Step {i+1}: {step['step']}")
            print(f"     Tool: {step['tool']}")
            print(f"     Parameters: {step['parameters']}")
            print(f"     Dependencies: {step['dependencies']}")

if __name__ == "__main__":
    test_execution_steps_format()
    test_fallback_execution_steps()
    
    print("\n\nüèÅ SUMMARY:")
    print("‚úÖ Enhanced JSON format includes detailed execution_steps")
    print("‚úÖ Each step provides tool name and specific parameters")
    print("‚úÖ Dependencies ensure proper execution order")
    print("‚úÖ Planner can directly execute these steps")
    print("‚úÖ Intelligent fallback also generates execution steps")
    print("‚úÖ Small models now provide actionable execution information")