✅ 1. Context Awareness
Understand the full scope of the project (not just the current file).
Maintain awareness of architecture, dependencies, coding conventions, and previous discussions.
Reason across multiple files and modules.
✅ 2. Codebase Navigation & Modification
Efficiently explore and reason about unfamiliar codebases.
Refactor or extend existing code while preserving logic and style.
Generate diffs or pull requests with meaningful explanations.
✅ 3. Intent Alignment
Ask clarifying questions when specs are ambiguous.
Prioritize user intent over literal instruction following.
Offer alternatives (e.g. “Do you want this optimized for readability or speed?”).
✅ 4. Error Diagnosis & Recovery
Identify and fix compiler/runtime errors with minimal guesswork.
Explain why something is broken, not just offer a fix.
Handle edge cases and suggest tests.
✅ 5. Tooling & Ecosystem Integration
Seamlessly integrate with version control (e.g. Git), package managers, CI/CD, and issue trackers.
Understand and modify infrastructure code (e.g. Docker, Terraform, GitHub Actions).
✅ 6. Learning & Adaptation
Adapt to user preferences over time (naming, patterns, libraries).
Learn from corrections and apply that learning in the future.
✅ 7. Communication & Documentation
Generate clear commit messages, PR descriptions, and in-code comments.
Document not just what the code does, but why certain decisions were made.
Support project onboarding (e.g., answering “How does this component work?”).
✅ 8. Safety & Responsibility
Avoid introducing security vulnerabilities or privacy violations.
Warn about anti-patterns, deprecated APIs, or unsafe code.
Respect licensing constraints when incorporating external code.
✅ 9. Task Planning & Decomposition
Break down vague or large goals into actionable steps.
Track subtasks, progress, and dependencies.
Allow pausing, reviewing, and editing of steps.
✅ 10. Collaboration & Handoff
Work well alongside human teammates (not take over).
Leave clear trails that others can follow.
Be interruptible: stop, undo, or revise work without chaos.